#!/usr/bin/env python3

"""
WhatTheFuzz's submission for the picoCTF challenge Guessing Game 2.

This script can be used in the following manner:
python3 ./solve.py <REMOTE/LOCAL>

Args:
    param1: LOCAL will operate locally on the user's machine.
            REMOTE will connect to the CTF webserver and grab the flag.
            If no parameter is specified, the program will default to LOCAL.

Returns:
    The flag to solve the challenge.
"""

from gzip import READ
from pwn import *

exe = ELF("./vuln")

context.binary = exe
context.log_level = 'info'


def guess_address_of_rand(io):
    '''As opposed to calling `rand()` as in guessing-game-1, this program
    simply defines the random number as the address of rand() % 4096 + 1.
    Since we won't know where the address is located, lets just guess.
    This may change every time, so we don't want to restart the program.
    This will return the answer to the question and leave the program open.
    '''

    log.info('Guessing the address of rand...')
    # Try each number in the range -4096 to 4096.
    for i in range(-4096, 4096):
        io.sendlineafter(b'What number would you like to guess?', str(i).encode())

        io.recvline() # Move past the newline.
        response = io.recvline()
        if response in b'Congrats! You win! Your prize is this print statement!\n':
            return i

    # If we get here, we didn't find the answer.
    raise Exception("Couldn't find the address of random % 4096 + 1.")


def conn():
    '''Establish the connection to the process, local or remote.
    '''

    if args.get('REMOTE'):
        io = remote('jupiter.challenges.picoctf.org', 13775)

    else:
        io = process([exe.path])

    return io



def main():
    '''Return the flag.
    '''

    with conn() as io:

        # Get the address of rand %4096 + 1
        addr_rand = guess_address_of_rand(io)
        log.info("Value of rand: {}".format(addr_rand))


if __name__ == '__main__':
    main()