#!/usr/bin/env python3

"""
WhatTheFuzz's submission for the <CTF> challenge <name>.

This script can be used in the following manner:
python3 ./solve.py <REMOTE/LOCAL>

Args:
    param1: LOCAL will operate locally on the user's machine.
            REMOTE will connect to the CTF webserver and grab the flag.
            If no parameter is specified, the program will default to LOCAL.

Returns:
    The flag to solve the challenge.
"""

from pwn import *

exe = ELF("./vuln")

context.binary = exe
context.log_level = 'info'
context.terminal = ['gnome-terminal', '-e']

GDB_COMMAND = '''
file ./vuln
'''
# For whatever reason, we can resolve the symbol to `increment` but it comes back wrong? This points to the return after `increment` has finished inside of main.
INCREMENT_ADDRESS = 0x00400bbc

def get_incremented_value():
    '''Open a debugger and get the value returned from the function `increment`. This is checked against the user's input. If the numbers match, we win!
    '''

    with gdb.debug(exe.path, gdbscript=GDB_COMMAND, api=True) as vuln:
        # Add our breakpoint (we could do this in the gdbscript, but I like the API).
        vuln.gdb.Breakpoint('* ' + str(INCREMENT_ADDRESS))

        vuln.gdb.continue_and_wait()

        # # # For some reason we have to wait for GDB to actually execute `finish` before we get the next frame. Otherwise, we get the error: `gdb.error: No frame is currently selected.`
        # # # This might just be my unfamiliarity with the API; there has to be a better way.
        # vuln.wait(timeout=2)

        # # # Get the selected frame, which will allow us to extract information regarding things like the registers, stack, etc.
        frame = vuln.gdb.selected_frame()

        # Get the return value of increment. This should be the same each time since the developer did not seed rand.
        rax = frame.read_register('rax')

        # Cast as an integer.
        return int(rax.cast(vuln.gdb.lookup_type('long')))


def conn():
    '''Establish the connection to the process, local or remote.
    '''

    if args.get('REMOTE'):
        io = remote('addr', 4141)

    else:
        io = process([exe.path])

    return io



def main():
    '''Return the flag.
    '''

    with conn() as io:

        io.interactive()


if __name__ == "__main__":
    print(get_incremented_value())
